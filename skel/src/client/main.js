__printCompiled__ = true;
window.exports = {};
ko.onDemandObservable = function (callback, target) {
    console.log('odo:' + callback);
    console.log('odo:' + JSON.stringify(target));
    var _value = ko.observable();
    var result = ko.computed({
            'read': function () {
                !result.loaded() ? callback.call(target) : void 0;
                return _value();
            },
            'write': function (newValue) {
                result.loaded(true);
                return _value(newValue);
            },
            'deferEvaluation': true
        });
    result.loaded = ko.observable();
    result.refresh = function () {
        return result.loaded(false);
    };
    return result;
};
var chartModel = exports.chartModel = function chartModel() {
        self = this;
        this.charts = ko.observableArray([{
                'id': 'one',
                'height': 150,
                'width': 200
            }]);
        this.data = ko.onDemandObservable(function () {
            return ajax('/data', function (data) {
                console.log(data);
                self.data(data);
                return data;
            });
        }, self);
        return self;
    };
var ajax = exports.ajax = function ajax(url, callback) {
        var request = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
        request.open('GET', url, true);
        request.overrideMimeType ? request.overrideMimeType('application/json') : void 0;
        request.onreadystatechange = function () {
            return request.readyState === 4 ? request.status === 0 || request.status === 200 ? callback(JSON.parse(request.responseText)) : callback(void 0) : void 0;
        };
        return request.send(null);
    };
var setupEvents = exports.setupEvents = function setupEvents(url) {
        return function () {
            var sourceø1 = new EventSource(url);
            sourceø1.addEventListener('refresh', function () {
                return location.reload(True);
            }, false);
            sourceø1.open = function () {
                return console.log('event source open');
            };
            sourceø1.onerror = function () {
                return console.log('event source error');
            };
            return sourceø1.onmessage = function (event) {
                return console.log(event);
            };
        }.call(this);
    };
model = new chartModel();
ko.applyBindings(model);
console.log(model);
var chart = exports.chart = new Chart(document.getElementsByTagName('canvas').item(0).getContext('2d')).Line(model.data);
console.log(chart);
console.log('loaded.');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGE6YXBwbGljYXRpb24vd2lzcDtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxPeUIyYVcwNklITmxkQ0JtYVd4bGRIbHdaVDFqYkc5cWRYSmxPZ29vYzJWMElTQXFLbkJ5YVc1MExXTnZiWEJwYkdWa0tpb2dkSEoxWlNrS0Nqc29ibk1nWVhCd0xtMWhhVzRwQ2pzZ0lDZzZjbVZ4ZFdseVpTQmJkMmx6Y0M1elpYRjFaVzVqWlNBNmNtVm1aWElnVzJacGNuTjBJSEpsYzNRZ2JHbHpkQ0JqYjI1cVhWMHBLUW9LS0hObGRDRWdLQzR0Wlhod2IzSjBjeUIzYVc1a2IzY3BJSHQ5S1FvS0tITmxkQ0VnYTI4dWIyNHRaR1Z0WVc1a0xXOWljMlZ5ZG1GaWJHVUtJQ0FnSURzZ1lYVm5iV1Z1ZEdWa0lHTnZiWEIxZEdWa0lHOWljMlZ5ZG1GaWJHVWdZbUZ6WldRZ2IyNGdhSFIwY0RvdkwzZDNkeTVyYm05amEyMWxiM1YwTG01bGRDOHlNREV4THpBMkwyeGhlbmt0Ykc5aFpHbHVaeTF2WW5ObGNuWmhZbXhsTFdsdUxXdHViMk5yYjNWMGFuTXVhSFJ0YkFvZ0lDQWdLR1p1SUZ0allXeHNZbUZqYXlCMFlYSm5aWFJkSUFvZ0lDQWdJQ0FnSUNoamIyNXpiMnhsTG14dlp5QW9LeUFpYjJSdk9pSWdZMkZzYkdKaFkyc3BLUW9nSUNBZ0lDQWdJQ2hqYjI1emIyeGxMbXh2WnlBb0t5QWliMlJ2T2lJZ0tFcFRUMDR1YzNSeWFXNW5hV1o1SUhSaGNtZGxkQ2twS1FvZ0lDQWdJQ0FnSUNoa1pXWWdYM1poYkhWbElDaHJieTV2WW5ObGNuWmhZbXhsS1NrS0lDQWdJQ0FnSUNBb1pHVm1JSEpsYzNWc2RBb2dJQ0FnSUNBZ0lDQWdJQ0FvYTI4dVkyOXRjSFYwWldRZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSURzZ2FXWWdhWFFnYUdGemJpZDBJR0psWlc0Z2JHOWhaR1ZrTENCcGMzTjFaU0JoSUdOaGJHeGlZV05yQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdPbkpsWVdRZ0lDaG1iaUJiWFFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvYVdZZ0tHNXZkQ0FvTG14dllXUmxaQ0J5WlhOMWJIUXBLUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvTG1OaGJHd2dZMkZzYkdKaFkyc2dkR0Z5WjJWMEtTa0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tGOTJZV3gxWlNrcENpQWdJQ0FnSUNBZ0lDQWdJQ0FnT3lCelpYUWdhWFFnWVhNZ2JHOWhaR1ZrQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdPbmR5YVhSbElDaG1iaUJiYm1WM0xYWmhiSFZsWFFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvTG14dllXUmxaQ0J5WlhOMWJIUWdkSEoxWlNrS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0Y5MllXeDFaU0J1WlhjdGRtRnNkV1VwS1FvZ0lDQWdJQ0FnSUNBZ0lDQWdJRHNnWkc4Z2JtOTBJR1YyWVd4MVlYUmxJR2x0YldWa2FXRjBaV3g1SUhkb1pXNGdZM0psWVhSbFpBb2dJQ0FnSUNBZ0lDQWdJQ0FnSURwa1pXWmxja1YyWVd4MVlYUnBiMjRnZEhKMVpYMHBLUW9nSUNBZ0lDQWdJRHNnYjNWeUlHbHVkR1Z5Ym1Gc0lITjBZWFJsTENCM2FHbGphQ0JqWVc0Z1ltVWdkWE5sWkNCbWIzSWdWVWtnWm1WbFpHSmhZMnNLSUNBZ0lDQWdJQ0FvYzJWMElTQnlaWE4xYkhRdWJHOWhaR1ZrSUNocmJ5NXZZbk5sY25aaFlteGxLU2tLSUNBZ0lDQWdJQ0E3SUc5MWNpQnlaV1p5WlhOb0lHaGhibVJzWlhJZ0xTQnpaWFFnYkc5aFpHVmtJSFJ2SUdaaGJITmxJR0Z1WkNCb1lYWmxJSFJvWlNCallXeHNZbUZqYXlCeVpTMXBiblp2YTJWa0NpQWdJQ0FnSUNBZ0tITmxkQ0VnY21WemRXeDBMbkpsWm5KbGMyZ2dLR1p1SUZ0ZElDZ3ViRzloWkdWa0lISmxjM1ZzZENCbVlXeHpaU2twS1FvZ0lDQWdJQ0FnSUhKbGMzVnNkQ2twQ2dvS0tHUmxabTRnWTJoaGNuUXRiVzlrWld3Z1cxMGdDaUFnS0hObGRDRWdjMlZzWmlCMGFHbHpLUW9nSUNoelpYUWhJSFJvYVhNdVkyaGhjblJ6SUNocmJ5NXZZbk5sY25aaFlteGxMV0Z5Y21GNUlGdDdJbWxrSWlBaWIyNWxJaUFpYUdWcFoyaDBJaUF4TlRBZ0luZHBaSFJvSWlBZ01qQXdmVjBwS1FvZ0lDaHpaWFFoSUhSb2FYTXVaR0YwWVNBb2EyOHViMjR0WkdWdFlXNWtMVzlpYzJWeWRtRmliR1VnQ2lBZ0lDQW9abTRnVzEwZ0tHRnFZWGdnSWk5a1lYUmhJaUFvWm00Z1cyUmhkR0ZkSUNoamIyNXpiMnhsTG14dlp5QmtZWFJoS1NBb2MyVnNaaTVrWVhSaElHUmhkR0VwSUdSaGRHRXBLU2tzSUhObGJHWXBLUW9nSUhObGJHWXBDZ29LS0dSbFptNGdZV3BoZUFvZ0lGdDFjbXdnWTJGc2JHSmhZMnRkQ2lBZ0tHUmxaaUJ5WlhGMVpYTjBDaUFnSUNBb2FXWWdkMmx1Wkc5M0xsaE5URWgwZEhCU1pYRjFaWE4wQ2lBZ0lDQWdJQ2hZVFV4SWRIUndVbVZ4ZFdWemRDNHBDaUFnSUNBZ0lDaEJZM1JwZG1WWVQySnFaV04wTGlBaVRXbGpjbTl6YjJaMExsaE5URWhVVkZBaUtTa3BDaUFnS0M1dmNHVnVJSEpsY1hWbGMzUWdPa2RGVkNCMWNtd2dkSEoxWlNrS0lDQW9hV1lnY21WeGRXVnpkQzV2ZG1WeWNtbGtaUzF0YVcxbExYUjVjR1VLSUNBZ0lDZ3ViM1psY25KcFpHVXRiV2x0WlMxMGVYQmxJSEpsY1hWbGMzUWdJbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNGlLU2tLSUNBb2MyVjBJU0J5WlhGMVpYTjBMbTl1Y21WaFpIbHpkR0YwWldOb1lXNW5aUW9nSUNBZ0lDQWdJQ2htYmlCYlhRb2dJQ0FnSUNBZ0lDQWdLR2xtSUNocFpHVnVkR2xqWVd3L0lISmxjWFZsYzNRdWNtVmhaSGt0YzNSaGRHVWdOQ2tLSUNBZ0lDQWdJQ0FnSUNBZ0tHbG1JQ2h2Y2lBb2FXUmxiblJwWTJGc1B5QnlaWEYxWlhOMExuTjBZWFIxY3lBd0tRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2hwWkdWdWRHbGpZV3cvSUhKbGNYVmxjM1F1YzNSaGRIVnpJREl3TUNrcENpQWdJQ0FnSUNBZ0lDQWdJQ0FnS0dOaGJHeGlZV05ySUNoS1UwOU9MbkJoY25ObElISmxjWFZsYzNRdWNtVnpjRzl1YzJVdGRHVjRkQ2twQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdLR05oYkd4aVlXTnJJRzVwYkNrcEtTa3BDaUFnS0M1elpXNWtJSEpsY1hWbGMzUWdiblZzYkNrcENnb29aR1ZtYmlCelpYUjFjQzFsZG1WdWRITWdXM1Z5YkYwS0lDQWdLR3hsZENCYmMyOTFjbU5sSUNodVpYY2dSWFpsYm5SVGIzVnlZMlVnZFhKc0tWMEtDUWtvTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElnQ2lBZ0lBa0pDWE52ZFhKalpRa2dDaUFnSUFrSkNTSnlaV1p5WlhOb0lnb2dJQ0FKQ1Frb1ptNGdXMTBnS0d4dlkyRjBhVzl1TG5KbGJHOWhaQ0JVY25WbEtTa0tJQ0FnQ1FrSlptRnNjMlVwQ2lBZ0lBa0pLSE5sZENFZ2MyOTFjbU5sTG05d1pXNEtJQ0FnQ1FrSktHWnVJRnRkQ2lBZ0lBa0pDUWtvWTI5dWMyOXNaUzVzYjJjZ0ltVjJaVzUwSUhOdmRYSmpaU0J2Y0dWdUlpa3BLUW9nSUNBSkNTaHpaWFFoSUhOdmRYSmpaUzV2Ym1WeWNtOXlDaUFnSUFrSkNTaG1iaUJiWFFvZ0lDQUpDUWtKS0dOdmJuTnZiR1V1Ykc5bklDSmxkbVZ1ZENCemIzVnlZMlVnWlhKeWIzSWlLU2twQ2lBZ0lBa0pLSE5sZENFZ2MyOTFjbU5sTG05dWJXVnpjMkZuWlFvZ0lDQUpDUWtvWm00Z1cyVjJaVzUwWFFvZ0lDQUpDUWtKS0dOdmJuTnZiR1V1Ykc5bklHVjJaVzUwS1NrcEtTa0tDZ29vYzJWMElTQnRiMlJsYkNBb2JtVjNJR05vWVhKMExXMXZaR1ZzS1NrS0tHdHZMbUZ3Y0d4NVFtbHVaR2x1WjNNZ2JXOWtaV3dwQ2lod2NtbHVkQ0J0YjJSbGJDa0tDaWhrWldZZ1kyaGhjblFnS0M1TWFXNWxJQ2h1WlhjZ1EyaGhjblFnS0M1blpYUkRiMjUwWlhoMElDZ3VhWFJsYlNBb1pHOWpkVzFsYm5RdVoyVjBMV1ZzWlcxbGJuUnpMV0o1TFhSaFp5MXVZVzFsSUNKallXNTJZWE1pS1NBd0tTQWlNbVFpS1NrZ2JXOWtaV3d1WkdGMFlTa3BDaWh3Y21sdWRDQmphR0Z5ZENrS0tIQnlhVzUwSUNKc2IyRmtaV1F1SWlrSyJdLCJuYW1lcyI6WyJfX3ByaW50Q29tcGlsZWRfXyIsIndpbmRvdyIsImV4cG9ydHMiLCJrbyIsIm9uRGVtYW5kT2JzZXJ2YWJsZSIsImNhbGxiYWNrIiwidGFyZ2V0IiwiY29uc29sZSIsImxvZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJfdmFsdWUiLCJvYnNlcnZhYmxlIiwicmVzdWx0IiwiY29tcHV0ZWQiLCJsb2FkZWQiLCJjYWxsIiwibmV3VmFsdWUiLCJyZWZyZXNoIiwiY2hhcnRNb2RlbCIsInNlbGYiLCJ0aGlzIiwiY2hhcnRzIiwib2JzZXJ2YWJsZUFycmF5IiwiZGF0YSIsImFqYXgiLCJ1cmwiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJudWxsIiwic2V0dXBFdmVudHMiLCJzb3VyY2XDuDEiLCJFdmVudFNvdXJjZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2NhdGlvbiIsInJlbG9hZCIsIlRydWUiLCJvbmVycm9yIiwib25tZXNzYWdlIiwiZXZlbnQiLCJtb2RlbCIsImFwcGx5QmluZGluZ3MiLCJjaGFydCIsIkNoYXJ0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIml0ZW0iLCJnZXRDb250ZXh0IiwiTGluZSJdLCJtYXBwaW5ncyI6IkFBQ01BLGlCQUFOLEc7QUFLaUJDLE1BQVgsQ0FBR0MsT0FBVCxHQUF5QixFO0FBRW5CQyxFQUFBLENBQUdDLGtCQUFULEdBRUksVUFBS0MsUUFBTCxFQUFjQyxNQUFkLEU7SUFDS0Ms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
